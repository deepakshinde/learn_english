I".(function() {
  Cable.ConnectionMonitor = (function() {
    var clamp, now, secondsSince;

    ConnectionMonitor.prototype.identifier = Cable.PING_IDENTIFIER;

    ConnectionMonitor.prototype.pollInterval = {
      min: 2,
      max: 30
    };

    ConnectionMonitor.prototype.staleThreshold = {
      startedAt: 4,
      pingedAt: 8
    };

    function ConnectionMonitor(consumer) {
      this.consumer = consumer;
      this.consumer.subscriptions.add(this);
      this.start();
    }

    ConnectionMonitor.prototype.connected = function() {
      this.reset();
      return this.pingedAt = now();
    };

    ConnectionMonitor.prototype.received = function() {
      return this.pingedAt = now();
    };

    ConnectionMonitor.prototype.reset = function() {
      return this.reconnectAttempts = 0;
    };

    ConnectionMonitor.prototype.start = function() {
      this.reset();
      delete this.stoppedAt;
      this.startedAt = now();
      return this.poll();
    };

    ConnectionMonitor.prototype.stop = function() {
      return this.stoppedAt = now();
    };

    ConnectionMonitor.prototype.poll = function() {
      return setTimeout((function(_this) {
        return function() {
          if (!_this.stoppedAt) {
            _this.reconnectIfStale();
            return _this.poll();
          }
        };
      })(this), this.getInterval());
    };

    ConnectionMonitor.prototype.getInterval = function() {
      var interval, max, min, ref;
      ref = this.pollInterval, min = ref.min, max = ref.max;
      interval = 4 * Math.log(this.reconnectAttempts + 1);
      return clamp(interval, min, max) * 1000;
    };

    ConnectionMonitor.prototype.reconnectIfStale = function() {
      if (this.connectionIsStale()) {
        this.reconnectAttempts += 1;
        return this.consumer.connection.reopen();
      }
    };

    ConnectionMonitor.prototype.connectionIsStale = function() {
      if (this.pingedAt) {
        return secondsSince(this.pingedAt) > this.staleThreshold.pingedAt;
      } else {
        return secondsSince(this.startedAt) > this.staleThreshold.startedAt;
      }
    };

    ConnectionMonitor.prototype.toJSON = function() {
      var connectionIsStale, interval;
      interval = this.getInterval();
      connectionIsStale = this.connectionIsStale();
      return {
        startedAt: this.startedAt,
        stoppedAt: this.stoppedAt,
        pingedAt: this.pingedAt,
        reconnectAttempts: this.reconnectAttempts,
        connectionIsStale: connectionIsStale,
        interval: interval
      };
    };

    now = function() {
      return new Date().getTime();
    };

    secondsSince = function(time) {
      return (now() - time) / 1000;
    };

    clamp = function(number, min, max) {
      return Math.max(min, Math.min(max, number));
    };

    return ConnectionMonitor;

  })();

}).call(this);
:ET